---
# tasks file for gitlab-postconfig
- name: GitLab Post | Check for pip
  stat:
    path: /usr/bin/pip
  register: pip

- name: GitLab Post | Install pip
  shell: easy_install pip

- name: GitLab Post | Install pyapi-gitlab 
  pip:
    name: pyapi-gitlab

- name: GitLab Post | Repos to create
  debug: msg="https://{{ hostname | lower }}.{{ dns_domain_name }}/{{ item.username }}/ansible-playbooks"
  with_items: "{{ users }}"

#- name: GitLab Post | Login with LDAP creds for each user
#  uri:
#    url: https://{{ inventory_hostname }}/api/v4/projects
#    method: GET
#    user: "{{ item.username }}"
#    password: "{{ users_password }}"
#    force_basic_auth: yes
#    validate_certs: no
#  with_items: "{{ users }}"
#  delegate_to: localhost
#  become: no
#  register: projects_list

#- debug:
#    msg: "list of projects {{ item }}"
#  with_items: "{{ projects_list.results }}"
#  when: projects_list | success

#- name: GitLab Post | Create projects via API
#  uri:
#    url: "https://{{ inventory_hostname }}/api/v4/projects"
#    method: POST
#    user: "{{ item.username }}"
#    password: "{{ users_password }}"
#    force_basic_auth: yes
#    validate_certs: no
#    status_code: 200
#    body_format: json
#    headers:
#      Content-Type: application/json
#    body: >
#      {
#        "name": "ansible-playbooks",
#        "visibility": "public",
#        "issues_enabled": "True",
#        "wiki_enabled": "False",
#        "snippets_enabled": "False",
#        "issues_enabled": "False",
#        "merge_requests_enabled": "True"
#      }
#  with_items: "{{ users }}"
#  delegate_to: localhost
#  become: no
#  register: projects_create
#
#- debug:
#    msg: "new projects results {{ item }}"
#  with_items: "{{ projects_create.results }}"
#  when: projects_create | success

# This module did nothing...  but finished OK.  Why?
#- name: GitLab Post | Create Gitlab Project in group Ansible
#  gitlab_project:
#    server_url: https://{{ hostname | lower }}.{{ dns_domain_name }}
#    validate_certs: False
#    login_user: "{{ item.username }}"
#    login_password: "{{ users_password }}"
#    visibility_level: 10
#    name: ansible-playbooks
#    issues_enabled: True
#    wiki_enabled: False
#    snippets_enabled: False
#    merge_requests_enabled: True
#    state: present
#  with_items: "{{ users }}"

- name: GitLab Post | Copy python create project script
  copy:
    src: create_project.py
    dest: /root/create_project.py
    owner: root
    group: root
    mode: 0700

- name: GitLab Post | Copy python create user script
  copy:
    src: create_user.py
    dest: /root/create_user.py
    owner: root
    group: root
    mode: 0700

#- name: GitLab Post | Set root user password 
#  shell: > 
#    echo "user = User.where(id: 1).first
#    user.password = '{{ domain_admin_password }}'
#    user.password_confirmation = '{{ domain_admin_password }}'
#    user.password_automatically_set = false
#    user.reset_password_token = nil
#    user.reset_password_sent_at = nil
#    user.save!
#    user.unlock_access!
#    quit
#    " | gitlab-rails console production

- name: GitLab Post | copy root password script to host
  template: 
    src: set_root_pw.sh.j2
    dest: /root/set_root_pw.sh
    owner: root
    group: root
    mode: 0700

- name: GitLab Post | Execute set root password 
  command: ./set_root_pw.sh
  args: 
    chdir: /root

- name: GitLab Post | Remove set root password script 
  file:
    path: /root/set_root_pw.sh
    state: absent

#- name: sleep 1 minute to allow root to initialize after password set
#  pause: 
#    minutes: 1

### Gitlab workaround
### Users are not populated from AD until login from Web UI 
### I haven't found an automated workaround... 
#
#- name: Add Local users
#  command: ./create_user.py -s https://gitlab.{{ dns_domain_name }} -u root -p {{ domain_admin_password }} -n {{user_prefix}}{{item}} -w {{ users_password }} -e {{user_prefix}}{{item}}@{{ dns_domain_name }}
#  args:
#    chdir: /root
#  with_sequence: count="{{ user_count }}"
#  register: gitlab_users
#  changed_when: "user_prefix + item + 'already exists' not in gitlab_users.stdout"

#- name: GitLab Post | Create local users via API
#  uri:
#    url: https://{{ inventory_hostname }}/api/v4/users
#    method: POST
#    user: root
#    password: "{{ domain_admin_password }}"
#    force_basic_auth: yes
#    validate_certs: no
#    status_code: 200
#    body_format: json
#    headers:
#      Content-Type: application/json
#    body: >
#      {
#        "username": "{{ item.username }}",
#        "password": "{{ users_password }}",
#        "name": "{{ item.name }}",
#        "mail": "{{ item.email }}"
#      }
#  with_items: "{{ users }}"
#  delegate_to: localhost
#  become: no

- name: GitLab Post | Create local users
  gitlab_user:
    server_url: https://{{ inventory_hostname }}
    validate_certs: False
    login_user: root
    login_password: "{{ domain_admin_password }}"
    name: "{{ item.name }}"
    username: "{{ item.username }}"
    password: "{{ users_password }}"
    email: "{{ item.username }}@{{ dns_domain_name }}"
    confirm: False
    state: present
  with_items: "{{ users }}"
  delegate_to: localhost
  become: no

- name: GitLab Post | Create Projects in GitLab
  command: ./create_project.py -s "https://{{ inventory_hostname }}" -u {{ item.username }} -p {{ users_password }} -r {{ item.username }}-playbooks
  args:
    chdir: /root
  with_items: "{{ users }}"
  register: gitlab_repos
  changed_when: "item.username + '-playbooks already Exists' not in gitlab_repos.stdout"





